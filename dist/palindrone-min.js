!function(e){var n=function(e){return n.fn.init(e),n.fn.findPalindromicSequences(),n.fn.sortFoundPalindromicSequences(),n.foundPalindromicSequences.slice(0,3)};n.searchedSequence="",n.searchedSequenceLength=0,n.foundPalindromicSequences=[],n.prototype=n.fn={init:function(e){n.searchedSequence=e,n.searchedSequenceLength=e.length,n.foundPalindromicSequences=[]},sortFoundPalindromicSequences:function(){n.foundPalindromicSequences.sort(function(e,n){return n.length-e.length})},testBoundaries:function(e,r){var c={low:e,up:r};return e-=1,r+=1,n.searchedSequenceLength>r&&e>=0&&n.searchedSequence[r]===n.searchedSequence[e]&&(c=n.fn.testBoundaries(e,r)),c},testCenter:function(e){var r,c;if(e%1===0?(r=e+1,c=e-1):(r=Math.ceil(e),c=Math.floor(e)),n.searchedSequence[r]===n.searchedSequence[c])return n.fn.testBoundaries(c,r);throw new Error("Center does not create a palindrome")},findPalindromicSequences:function(){for(var e=.5;e<n.searchedSequenceLength;e+=.5)try{var r=n.fn.testCenter(e);n.foundPalindromicSequences.push({start:r.low,length:r.up-r.low+1,content:n.searchedSequence.slice(r.low,r.up+1)})}catch(c){}}},"undefined"!=typeof module&&"undefined"!=typeof module.exports?module.exports=n:window.palindrone=n}();